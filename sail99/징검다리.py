import math

def max_stepping_stones(n):
    # 이진 탐색을 위한 초기 설정
    low, high = 1, int(math.sqrt(2 * n)) + 1
    answer = 1

    while low <= high:
        mid = (low + high) // 2
        if (mid * (mid + 1)) // 2 <= n:
            answer = mid  # 가능한 최대 밟은 징검다리 수
            low = mid + 1
        else:
            high = mid - 1

    return answer

# 테스트 케이스 입력 및 출력
T = int(input())
for _ in range(T):
    n = int(input())
    print(max_stepping_stones(n))



# 목표는 승택이가 최대한 많은 징검다리를 밟으면서 강을 건너는 것
# 징검다리수 (N) : 강에 징검다리가 1 부터 N 번까지 번호가 매겨져 있음, 이 N번 징검다리를 반드시 밟아야함.
# 점프 규칙 : 승택이는 한 번 점프할 때마다 이전보다 더 멀리 점프해야함.
# 강 건너기 규칙 : 마지막에 N 번 징검다리를 밟은 후에는 점프하지 않고 강을 건너는 것으로 간주
#
#
# # 접근 방식
# 이 규칙을 기반으로 강을 건널 때 점프 거리를 점점 늘려가며 얼마나 많은 징검다리를 밟을 수 있을지 계산해야함.
#
#
# # 단계적 이해
# 1. 첫 점프 : 승택이는 1번, 2번, ... 아무 징검다리부터 시작할 수 있음.
# 2. 두 번째 이후 점프 : 첫 번째 점프에서 예를 들어 5번에 착지했다면, 그 다음 점프는 6이상의 거리를 뛰어야함. 그러니까 점점 더 멀어지게 되는거임.
# 3. 점프를 늘리면서 최대한 밟을 수 있는 징검다리 개수를 구하고, 마지막에 N번에 정확이 도착할 수 있어야함.
